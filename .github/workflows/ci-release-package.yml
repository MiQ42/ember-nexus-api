name: Release package
on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type (one of): patch, minor, major'
        required: true
permissions:
  contents: write
jobs:

  checkout-repo-and-bump-version:
    runs-on: buildjet-2vcpu-ubuntu-2204
    name: Check out Repo and Bump Version
    steps:

      - uses: actions/checkout@v3

      - name: Bump version
        shell: bash
        run: |
          sudo apt-get install -y moreutils
          docker pull usvc/semver:latest
          version=$(cat composer.json | jq -r .version)
          bumpType=${{ github.event.inputs.release-type }}
          newVersion="$(docker run usvc/semver:latest bump $bumpType $version | tr -d '\r')"
          jq --arg newVersion "$newVersion" '.version = $newVersion' composer.json | sponge composer.json
          echo "New version: $newVersion"
          mkdir .ci
          echo "NEW_VERSION=$newVersion" >> .ci/NEW_VERSION.txt
          echo "NEW_VERSION=$newVersion" >> $GITHUB_ENV

      - name: Update changelog unreleased section with new version
        uses: superfaceai/release-changelog-action@v2
        with:
          path-to-changelog: CHANGELOG.md
          version: ${{ env.NEW_VERSION }}
          operation: release

      - name: Archive working folder for artifact
        shell: bash
        run: |
          tar -czf /tmp/bumped-repo.tar.gz .

      - uses: actions/upload-artifact@v3
        with:
          name: bumped-repo
          path: /tmp/bumped-repo.tar.gz
          retention-days: 7

  build-docker-image-amd:
    runs-on: buildjet-4vcpu-ubuntu-2204
    name: Build Docker Image - AMD
    needs: checkout-repo-and-bump-version
    steps:

      - uses: actions/download-artifact@v3
        with:
          name: bumped-repo
          path: /tmp

      - name: Extract working folder from artifact
        shell: bash
        run: |
          ls -la /tmp
          tar xvfz /tmp/bumped-repo.tar.gz -C ./
          ls -la

      - name: Load version from artifact
        shell: bash
        run: |
          ls -la .ci
          cat .ci/NEW_VERSION.txt
          cat .ci/NEW_VERSION.txt >> $GITHUB_ENV

      - name: Debug version
        run: |
          echo $NEW_VERSION

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image - AMD
        run: |
          docker build \
            --target production \
            --build-arg VERSION=$NEW_VERSION \
            --no-cache \
            -t api:latest-amd \
            -f ./docker/Dockerfile \
            .
          docker save api:latest-amd | gzip > api-latest-amd.tar.gz

      - uses: actions/upload-artifact@v3
        with:
          name: docker-image-api-latest-amd
          path: api-latest-amd.tar.gz
          retention-days: 7

  build-docker-image-arm:
    runs-on: buildjet-4vcpu-ubuntu-2204-arm
    name: Build Docker Image - ARM
    needs: checkout-repo-and-bump-version
    steps:

      - uses: actions/download-artifact@v3
        with:
          name: bumped-repo
          path: /tmp

      - name: Extract working folder from artifact
        shell: bash
        run: |
          ls -la /tmp
          tar xvfz /tmp/bumped-repo.tar.gz -C ./
          ls -la

      - name: Load version from artifact
        shell: bash
        run: |
          ls -la .ci
          cat .ci/NEW_VERSION.txt
          cat .ci/NEW_VERSION.txt >> $GITHUB_ENV

      - name: Debug version
        run: |
          echo $NEW_VERSION

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image - ARM
        run: |
          docker build \
            --target production \
            --build-arg VERSION=$NEW_VERSION \
            --no-cache \
            -t api:latest-arm \
            -f ./docker/Dockerfile \
            .
          docker save api:latest-arm | gzip > api-latest-arm.tar.gz

      - uses: actions/upload-artifact@v3
        with:
          name: docker-image-api-latest-arm
          path: api-latest-arm.tar.gz
          retention-days: 7


  publish-release:
    runs-on: buildjet-4vcpu-ubuntu-2204
    name: Publish release
    needs: [build-docker-image-amd, build-docker-image-arm]
    steps:

      - uses: actions/download-artifact@v3
        with:
          name: bumped-repo
          path: /tmp

      - name: Extract working folder from artifact
        shell: bash
        run: |
          ls -la /tmp
          tar xvfz /tmp/bumped-repo.tar.gz -C ./
          ls -la

      - name: Load version from artifact
        shell: bash
        run: |
          ls -la .ci
          cat .ci/NEW_VERSION.txt
          cat .ci/NEW_VERSION.txt >> $GITHUB_ENV

      - name: Debug version
        run: |
          echo $NEW_VERSION

      - uses: actions/download-artifact@v3
        with:
          name: docker-image-api-latest-amd
          path: /tmp/docker

      - uses: actions/download-artifact@v3
        with:
          name: docker-image-api-latest-arm
          path: /tmp/docker

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create multi arch Docker image
        shell: bash
        run: |
          ls -la /tmp/docker
          docker load < /tmp/docker/api-latest-amd.tar.gz
          docker load < /tmp/docker/api-latest-arm.tar.gz
          docker tag api:latest-amd embernexus/api:test-amd
          docker tag api:latest-arm embernexus/api:test-arm
          docker push embernexus/api:test-amd
          docker push embernexus/api:test-arm
          docker manifest create \
            embernexus/api:test \
            --amend embernexus/api:manifest-amd \
            --amend embernexus/api:manifest-arm
          docker manifest push embernexus/api:test

#  release-package:
#    runs-on: ubuntu-latest
#    steps:
#
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      # see also https://github.com/Nautilus-Cyberneering/pygithub
#      - name: Import GPG key
#        id: import-gpg
#        uses: crazy-max/ghaction-import-gpg@v5
#        with:
#          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
#          passphrase: ${{ secrets.PASSPHRASE }}
#          git_user_signingkey: true
#          git_commit_gpgsign: true
#
#      - name: Debug GPG
#        run: |
#          echo "fingerprint: ${{ steps.import-gpg.outputs.fingerprint }}"
#          echo "keyid:       ${{ steps.import-gpg.outputs.keyid }}"
#          echo "name:        ${{ steps.import-gpg.outputs.name }}"
#          echo "email:       ${{ steps.import-gpg.outputs.email }}"
#
#      - name: Git configuration
#        run: |
#          git config --global user.email "${{ steps.import-gpg.outputs.email }}"
#          git config --global user.name "${{ steps.import-gpg.outputs.name }}"
#
#      - name: Bump version
#        shell: bash
#        run: |
#          sudo apt-get install -y moreutils
#          docker pull usvc/semver:latest
#          version=$(cat composer.json | jq -r .version)
#          bumpType=${{ github.event.inputs.release-type }}
#          newVersion="$(docker run usvc/semver:latest bump $bumpType $version | tr -d '\r')"
#          jq --arg newVersion "$newVersion" '.version = $newVersion' composer.json | sponge composer.json
#          echo "New version: $newVersion"
#          echo "NEW_VERSION=$newVersion" >> $GITHUB_ENV
#          echo "RELEASE_TAG=latest" >> $GITHUB_ENV
#
#
#      - name: Commit changes and create tag
#        run: |
#          git add "composer.json"
#          git add "CHANGELOG.md"
#          git commit -m "chore: release ${{ env.NEW_VERSION }}"
#          git tag ${{ env.NEW_VERSION }}
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build Docker image
#        run: |
#          docker build \
#            --target production \
#            --build-arg VERSION=${{ env.NEW_VERSION }} \
#            --no-cache \
#            -t api:local \
#            -f ./docker/Dockerfile \
#            .
#
#      - name: Release on Docker Hub
#        run: |
#          docker tag api:local embernexus/api:${{ env.NEW_VERSION }}
#          docker tag api:local embernexus/api:latest
#          docker push embernexus/api:${{ env.NEW_VERSION }}
#          docker push embernexus/api:latest
#
#      - name: Docker Hub Description
#        uses: peter-evans/dockerhub-description@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#          repository: embernexus/api
#          short-description: ${{ github.event.repository.description }}
#
#      - name: Push repository changes
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          git push origin && git push --tags
#
#      - name: Read version changelog
#        id: get-changelog
#        uses: superfaceai/release-changelog-action@v1
#        with:
#          path-to-changelog: CHANGELOG.md
#          version: ${{ env.NEW_VERSION }}
#          operation: read
#
#      - name: Update GitHub release changelog
#        uses: softprops/action-gh-release@v1
#        with:
#          tag_name: ${{ env.NEW_VERSION }}
#          body: ${{ steps.get-changelog.outputs.changelog }}
#          prerelease: ${{ startsWith(github.event.inputs.release-type, 'pre') }}
#          token: ${{ secrets.RELEASE_TOKEN }}

# disabled due to low credits in free tier (5 per month)
#      - name: Initiate Originstamp certificate
#        run: |
#          curl -X POST "http://api.originstamp.com/v4/timestamp/create" \
#            -H "Content-Type: application/json" \
#            -H "Authorization: ${{ secrets.ORIGINSTAMP_AUTH_TOKEN }}" \
#            -d \
#            "{
#              \"comment\": \"Release ${{ env.NEW_VERSION }} of ember-nexus/web-sdk\",
#              \"hash\": \"${{ env.SHA }}\"
#            }"
#        env:
#          SHA: ${{ github.sha }}
#
#      - uses: JasonEtco/create-an-issue@v2
#        env:
#          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
#          NEW_VERSION: ${{ env.NEW_VERSION }}
#        with:
#          filename: .github/ISSUE_TEMPLATE_POST_RELEASE_TASK.md
